namespace TaskSchedulerScraping.Domain.Validations;

/// <summary>
/// Validation result
/// </summary>
internal class ValidationResult<T> : IValidationResult<T>
    where T : class
{
    /// <summary>
    /// If ok validation, Result is not null
    /// </summary>
    public T? Result { get; private set; }

    /// <summary>
    /// Valid if validation is sucess
    /// </summary>
    public bool IsSuccess { get; }

    /// <summary>
    /// Errors
    /// </summary>
    public IEnumerable<Exception> Errors { get; }

    /// <summary>
    /// Messages if isn't get success
    /// </summary>
    public IEnumerable<string> Messages => Errors.Select(error => error.Message);

    /// <summary>
    /// Generated by static internal methods
    /// </summary>
    private ValidationResult(bool sucess, IEnumerable<Exception> errors, T? result)
    {
        IsSuccess = sucess;
        Result = result;
        Errors = errors;
    }

    /// <summary>
    /// Sucess validation
    /// </summary>
    /// <returns>Object with <see cref="IsSuccess"/> true</returns>
    public static ValidationResult<T> GetSuccess(T value)
    {
        if (value is null)
            throw new ArgumentNullException(nameof(value));

        return new ValidationResult<T>(true, new Exception[0], value);
    }

    /// <summary>
    /// Error in the validation
    /// </summary>
    /// <returns>Object with <see cref="IsSuccess"/> false and enumerable of errors</returns>
    /// <exception cref="ArgumentNullException"/>
    public static ValidationResult<T> GetWithErrors(IEnumerable<string> errors)
    {
        if (errors is null)
            throw new ArgumentNullException(nameof(errors));

        return new ValidationResult<T>(false, errors.Select(error => new Exception(error)), null);
    }


    /// <summary>
    /// Error in the validation
    /// </summary>
    /// <returns>Object with <see cref="IsSuccess"/> false and enumerable of errors</returns>
    /// <exception cref="ArgumentNullException"/>
    public static ValidationResult<T> GetWithErrors(AggregateException errors)
    {
        if (errors is null)
            throw new ArgumentNullException(nameof(errors));

        return new ValidationResult<T>(false, errors.InnerExceptions, null);
    }
    
    /// <summary>
    /// Error in the validation
    /// </summary>
    /// <returns>Object with <see cref="IsSuccess"/> false and enumerable of errors</returns>
    /// <exception cref="ArgumentNullException"/>
    public static ValidationResult<T> GetWithErrors(IEnumerable<Exception> errors)
    {
        if (errors is null)
            throw new ArgumentNullException(nameof(errors));

        return new ValidationResult<T>(false, errors, null);
    }
}